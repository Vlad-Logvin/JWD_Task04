Внимание !!!
    Существует несколько ограничений на использование динамически диспетчируемых функций-компонент:
    - При переопределении в производном классе динамически диспетчируемой функции базового класса должен обязательно тот использоваться тот же индекс диспетчирования. Например, следующее определение ошибочно:
    class TestBase
    {
      virtual void sample()  = [100];
    };

    class TestDerived : public TestBase
    {
      virtual void sample()  = [299];
    };
    !!! Это определение ошибочно, так как индексы диспетчирования различны.

    - Каждая динамически диспетчируемая функция в иерархии классов должна иметь уникальный индекс диспетчирования? Например, следующее определение ошибочно:
    class TestBase
    {
      virtual void sample1()  = [100];
      virtual void sample2()  = [200];
      virtual void sample3()  = [100];
    };
    !!! Это определение ошибочно, так как тут пытаются присвоить двум различным функциям одинаковые индексы диспетчирования.

    - "Обычная" (не динамически диспетчируемая) виртуальная функция в базовом классе не может быть переопределена в производном классе динамически диспетчируемой функцией. Например, следующее определение ошибочно:
    class TestBase
    {
      virtual void sample();
    };

    class TestDerived : public TestBase
    {
      virtual void sample()  = [100];
    };
    !!! Это определение ошибочно, так как тут пытаются переопределить обычную функцию динамически диспетчируемой.

    - Динамически диспетчируемая функция в базовом классе не может быть переопределена в производном классе "обычной" виртуальной функцией. Например, следующее определение ошибочно:
    class TestBase
    {
      virtual void sample() = [100];
    };

    class TestDerived : public TestBase
    {
      virtual void sample();
    };
    !!! Это определение ошибочно, так как тут пытаются переопределить динамически диспетчируемую функцию обычной.

    - Когда класс является производным из более чем одного базового класса, то говорят, что этот производный класс имеет множественное наследование. Только первый базовый класс для производного класса со множественным наследованием может иметь динамически диспетчируемые функции. Например, следующее определение класса является допустимым:
    class A
    {
      virtual void AA() = [100];
    };

    class B
    {
    };

    class C : public A, public B
    {
    };
    !!! Здесь динамически диспетчируемые функции находятся в первом базовом класс и все нормально.

    Но это определение является недопустимым:
    class A
    {
    };

    class B
    {
      virtual void BB() = [100];
    };

    class C : public A, public B
    {
    };